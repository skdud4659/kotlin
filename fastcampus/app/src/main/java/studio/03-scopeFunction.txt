(Kotlin)
Scope Function
- 동작의 원리는 모르더라도 언제 사용하면 좋은지 알고 사용해도 가치가 있다.
- { 본문 }

apply, also, run(with) / let

val victor = Person().apply {
    name = "victor"
    age = 20
}

- apply / also > 처리가 끝나면(스코프 끝) 인스턴스(객체)를 반환한다.
- run(with) / let > 처리가 끝나면 최종값(제일 마지막 라인)을 반환한다.

- apply / run(with) > this > 스코프 외부의 변수명과 혼동할 수 있다.
- also / let > it > 스코프 외부의 변수명과 혼동 방지

class Person(var name: String? = null, var age: Int? = null) {}

//apply**
// - 적용하다
// - 객체를 초기화할때 사용하면 좋음(init 구문이 밖으로 나와있다고 생각)
val gildong = Person().apply {
    name = "길동"
    age = 20
}

// also**
// 사용 : 유효성검사, 수신된 객체(it)의 속성을 변경하지 않고 사용할 때
val gildong2 = Person("victor").also {
    nameIsGildong(it.name) // false
}

**this/it 차이
- this : 클래스 자체를 의미
- it : 클래스로 만들어진 객체를 의미

// run
// - apply와 기본적으로 동일하나 최종값(마지막 라인)을 반환한다 > 특정 계산 결과가 필요한 경우 사용
// run과 with는 사용법이 다를 뿐 똑같다.(단, with는 nullable 타입을 받지 못한다.)
val ageAfter10year = Person("gildong", 10).run {
    age!! + 10 // 20
}
val ageAfter10year2 = with(Person("gildong", 10)) {
    age!! + 10 // 20
}

// let**
// - 기본적으로 also와 동일
// - 마지막줄을 리턴
// ?을 붙이면서 null이 아닐 경우 {} 하겠다로 사용.
val gildong5 = Person("victor")?.let {}