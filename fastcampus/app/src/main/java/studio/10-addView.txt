addView > ListView > RecyclerView
- 개발하기 쉽다.
- 성능이 좋다.

** addView
- 부모뷰가 될 수 있는 뷰에 자식뷰를 붙여 넣는다.
    - 코드상에서 동적으로 넣어준다.
    - 자식뷰의 형태(XML의 배치나 속성)는 동일하지만, 그 내용물만 다르다.
    - 자주 볼 수 있는 형태 > listView


** listView
- 기본적인 동작원리는 addView와 동일 but, 갱신이 가능하다.
- 어답터
    - 데이터와 뷰를 짝지어 주는 역할.
    - 요청 시 해당 번째 데이터를 준다.
    - 데이터가 변경되었을 때 갱신
    ** BaseAdapter
       - ArrayAdapter : 배열 타입
       - CursorAdapter : 데이터 전용
       - SimpleAdapter : 정적 XML > 언제든 동일한 데이터가 나갈 때, 데이터 변화가 없을 때

** recyclerView
- listView의 개선판
- listView의 단점
    - 매번 새롭게 뷰를 만들어줘야 한다.
    - 뷰홀더를 사용하더라도 여전히 성능 이슈가 있다.
    > recyclerView는 뷰홀더를 기본적으로 사용이 되기 때문에 성능이 좋아졌다.
        - viewHolder가 없을 경우 무조건 에러.
- recyclerView의 장점
    - 유연하다
        - 간단한 변경으로 여러 기능 구현이 가능하다.
        - 수정이 용이하다. (세로, 가로, 그리드, 스태거드, 그리거드 방향으로 아이템 배치가 가능하다.)
        - 아이템이 들어갈 뷰를 동적으로 변경하는게 가능하다.
